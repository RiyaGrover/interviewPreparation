Link - https://leetcode.com/problems/product-of-array-except-self/description/?envType=study-plan-v2&envId=leetcode-75

//Alternate approach - with O(1)

class Solution {
    public int[] productExceptSelf(int[] nums) {
        int n = nums.length;
        int[] output = new int[n];
        
        output[0] = 1;
        
        // Calculate the prefix products and store them in the output array
        for (int i = 1; i < n; i++) {
            output[i] = output[i - 1] * nums[i - 1];
        }
        
        int suffixProduct = 1;
        
        // Calculate the suffix products and update the output array
        for (int i = n - 1; i >= 0; i--) {
            output[i] *= suffixProduct;
            suffixProduct *= nums[i];
        }
        
        return output;
    }
}

// Alternate approach O(n)

class Solution {
    public int[] productExceptSelf(int[] nums) {
        
        int [] prefix = new int[nums.length];
        int [] suffix = new int[nums.length];

        prefix[0] =1;

        for (int i = 1; i < nums.length ; i++){
            prefix[i] = prefix[i-1] * nums[i -1];
        }

        suffix[nums.length-1] =1;

        for(int i = nums.length -2 ;i >= 0 ; i--){
            suffix[i] = suffix[i +1] * nums[i+1];
        }

        int [] ans = new int[nums.length];
        for(int i = 0; i< nums.length ; i++){
            ans[i] = prefix[i] * suffix[i];
        }
        return ans;
    }
}






